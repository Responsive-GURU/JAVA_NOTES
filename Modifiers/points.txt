MODIFIERS:

1.PUBLIC
2.PRIVATE
3.PROTECTED
4.DEFAULT

NOTE :
1. We need to access the data members through an instance(Object) if the data member is 
not static
2. If the data member is static then we can access it directly

if any class contain the main method and it is imported in another packages we can access
the main method of the respective class... and it execution starts without any error.

PUBLIC:
------------------------------------------------------------------------------------
Accessible anywhere in the program and can be accessed in any of the packages...

PRIVATE:
------------------------------------------------------------------------------------
It will be accessible only within the class where the private method is created

Private data member of the class only be available within the class not for the subclasses
that are inherited.


PROTECTED
--------------------------------------------------------------------------------------
Protected data members can be access only within the packages. If we need to access the 
methods in "protected" in other packages we can create a child class for the available
protected method ... class  --> then we  can access it..

DEFAULT
-----------------------------------------------------------------------------------------
It is available only within the package that the method is created..
if we create a method wihtout any access modifier it is treated as "default" 
class and subclasses within the same package can access it


NON - ACCESS MODIFIERS:
1.abstract
2.static

ABSTRACT
------------------------------------------------------------------------------------
abstract keyword is used only for the class and method
1. if a method is not abstract then we need to define the method
2. we cannot use final keyword for the abstract mehtods because it need to be overriden 
by the inherited class
3. we can have a constructor for the abstract class
4. we cannot create an object for the abstract class directly 
5. abstract method implementation should be done by its inherited class without fail


STATIC:
-------------------------------------------------------------------------------------
It is a keyword which used to access all the data members of the class by class name of by 
its name.

static blocks are executed at the time of class loading 
it is mainly used for variable initialization.
if a variable or method is Declared as static it is shared through all the instances of the class
so the memory is allocated only once

FINAL
--------------------------------------------------------------------------------------
If a class is declared as final then is cannot be inherited by the subclasses
If a method is declared as final then is cannot be overridden 
If a method Parameter is final then we can be sure that there will be no changed
If a variable is final it cannot be reassigned
final int age;
age = 21 is valid
age = 22 is not valid ... 
if we declared a final value 1st assigination will be accepted


STRICTFP:
-------------------------------------------------------------------------------------
Whenever we are working with floating point calculation there may a platform dependent
result to assure that we are working with platform independent data we use strictfp...
strictfp can be only used for class and methods
we can use the strictfp for both interface and abstract 


SYNCRONIZATION: 
------------------------------------------------------------------------------------
allows only one thread to execute

NATIVE :
-------------------------------------------------------------------------------------
can be used only on mehtods legacy methods can be implemented

VOLATILE:
--------------------------------------------------------------------------------------
can be used only on variables, which shows the value updated by  thread is visible to
anothter thread... 

TRANSIENT
---------------------------------------------------------------------------------------
can be used only on variables, Serialization

Access Modifiers:

public: Accessible from anywhere.
protected: Accessible within the same package and subclasses.
Default (no modifier): Accessible only within the same package.
private: Accessible only within the same class.

Non-Access Modifiers:

abstract: Indicates that a class or method is incomplete and must be implemented by subclasses.
final: Prevents a class from being extended, a method from being overridden, or a variable from being reassigned.
static: Indicates that a field or method belongs to the class rather than instances of the class.
transient: Indicates that a field should not be serialized when the class is serialized.
volatile: Indicates that a field's value may be changed by multiple threads, and access should be synchronized.
synchronized: Provides thread-safe access to methods or blocks, ensuring only one thread can execute them at a time.
native: Declares that a method is implemented in a platform-specific manner, usually in another language like C or C++.
strictfp: Ensures consistent floating-point arithmetic across different platforms.